on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  deploy:
    name: Deploy to Linux Server
    runs-on: ubuntu-latest

    steps:
      # Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Setup JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # Build the project using Gradle
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v3

      # Grant execute permission for gradlew
      - name: Grant Execute Permission for Gradlew
        run: chmod +x ./gradlew

      - name: Build Project
        run: |
          echo "spring:" > ./src/main/resources/application-db.yml
          echo "  datasource:" >> ./src/main/resources/application-db.yml
          echo "    driver-class-name: ${{ secrets.DRIVER_CLASS_NAME }}" >> ./src/main/resources/application-db.yml
          echo "    url: ${{ secrets.URL }}" >> ./src/main/resources/application-db.yml
          echo "    username: ${{ secrets.USERNAME }}" >> ./src/main/resources/application-db.yml
          echo "    password: ${{ secrets.PASSWORD }}" >> ./src/main/resources/application-db.yml
          
          echo "spring.datasource.url=${{ secrets.SPRING_DATASOURCE_URL }}" > ./src/main/resources/application-secret.properties
          echo "spring.datasource.username=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> ./src/main/resources/application-secret.properties
          echo "spring.datasource.password=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> ./src/main/resources/application-secret.properties
          echo "OPENVIDU_URL=${{ secrets.OPENVIDU_URL }}" >> ./src/main/resources/application-secret.properties
          echo "OPENVIDU_SECRET=${{ secrets.OPENVIDU_SECRET }}" >> ./src/main/resources/application-secret.properties
          echo "spring.cache.type=${{ secrets.CACHE_TYPE }}" >> ./src/main/resources/application-secret.properties
          echo "spring.data.redis.host=${{ secrets.DATA_REDIS_HOST }}" >> ./src/main/resources/application-secret.properties
          echo "spring.data.redis.port=${{ secrets.SPRING_DATA_REDIS_PORT }}" >> ./src/main/resources/application-secret.properties
          echo "spring.data.redis.password=${{ secrets.SPRING_DATA_REDIS_PASSWORD }}" >> ./src/main/resources/application-secret.properties
          echo "spring.session.redis.namespace=${{ secrets.SPRING_SESSION_REDIS_NAMESPACE }}" >> ./src/main/resources/application-secret.properties
          echo "server.servlet.session.cookie.secure=true" >> ./src/main/resources/application-secret.properties
          echo "server.servlet.session.cookie.same-site=none" >> ./src/main/resources/application-secret.properties
          echo "ncloud.s3.access-key=${{secrets.NCLOUD_S3_ACCESS_KEY}}" >> ./src/main/resources/application-secret.properties
          echo "ncloud.s3.secret-key=${{secrets.NCLOUD_S3_SECRET_KEY}}" >> ./src/main/resources/application-secret.properties
          echo "ncloud.s3.region=ap-northeast-2" >> ./src/main/resources/application-secret.properties
          echo "ncloud.s3.bucket-name=${{secrets.NCLOUD_S3_BUCKET_NAME}}" >> ./src/main/resources/application-secret.properties
          echo "ncloud.s3.endpoint=kr.object.ncloudstorage.com" >> ./src/main/resources/application-secret.properties
          echo "toss.clientKey=${{secrets.TOSS_CLIENTKEY}}" >> ./src/main/resources/application-secret.properties
          echo "toss.secretKey=${{secrets.TOSS_SECRETKEY}}" >> ./src/main/resources/application-secret.properties
          echo "toss.customerKey=${{secrets.TOSS_CUSTOMERKEY}}" >> ./src/main/resources/application-secret.properties
          echo "openai.api.key=${{secrets.OPENAI_API_KEY}}" >> ./src/main/resources/application-secret.properties
          echo "naver.api.key.id=${{secrets.NAVER_API_KEY_ID}}" >> ./src/main/resources/application-secret.properties
          echo "naver.api.key.secret=${{secrets.NAVER_API_KEY_SECRET}}" >> ./src/main/resources/application-secret.properties
          echo "python.env.url=${{secrets.PYTHON_ENV_URL}}" >> ./src/main/resources/application-secret.properties
          echo "coolsms.api.key=${{secrets.COOLSMS_API_KEY}}" >> ./src/main/resources/application-secret.properties
          echo "coolsms.api.secret=${{secrets.COOLSMS_API_SECRET}}" >> ./src/main/resources/application-secret.properties
          echo "api.certKeyc=${{secrets.API_CERTKEYC}}" >> ./src/main/resources/application-secret.properties
          echo "spring.session.redis.flush-mode=on_save" >> ./src/main/resources/application-secret.properties
          echo "spring.session.redis.cleanup-cron=60 * * * * *" >> ./src/main/resources/application-secret.properties
          echo "server.servlet.session.persistent=false" >> ./src/main/resources/application-secret.properties
          echo "spring.session.redis.repository-type=default" >> ./src/main/resources/application-secret.properties
          echo "saupja.api.key=${{secrets.SAUPJA_API_KEY}}" >> ./src/main/resources/application-secret.properties
          echo "papago.client.id=${{secrets.PAPAGO_CLIENT_ID}}" >> ./src/main/resources/application-secret.properties
          echo "papago.client.secret=${{secrets.PAPAGO_CLIENT_SECRET}}" >> ./src/main/resources/application-secret.properties
          
          
          
          
          ./gradlew build -x test

      - name: Deploy to Remote Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
          
          # SSH into the server and prepare the deployment folder
          ssh $SERVER_USER@$SERVER_HOST 'bash -s' << 'EOF'
            sudo mkdir -p /opt/susussg-backend/config
            sudo chown -R $USER:$USER /opt/susussg-backend
            sudo chmod -R 755 /opt/susussg-backend
          EOF
          
          # Copy files to the deployment folder
          scp -r ./build/libs/*.jar $SERVER_USER@$SERVER_HOST:/opt/susussg-backend/
          scp ./src/main/resources/application-db.yml $SERVER_USER@$SERVER_HOST:/opt/susussg-backend/config/
          scp ./src/main/resources/application-secret.properties $SERVER_USER@$SERVER_HOST:/opt/susussg-backend/config/

          # Restart the application
          ssh $SERVER_USER@$SERVER_HOST 'bash -s' << 'EOF'
            chmod +x /opt/susussg-backend/run.sh
            /opt/susussg-backend/run.sh restart
          EOF